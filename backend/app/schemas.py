# backend/app/schemas.py

from pydantic import BaseModel, ConfigDict, EmailStr
from datetime import datetime
from typing import List, Optional

# ====================================================================
#                          RECIPE SCHEMAS
# ====================================================================

# This is a base schema for a recipe, containing the fields that are
# common to both creating and reading recipes.
class RecipeBase(BaseModel):
    title: str
    description: Optional[str] = None

# Schema for data required when creating a new recipe.
# It inherits from RecipeBase.
class RecipeCreate(RecipeBase):
    pass

class UserInRecipe(BaseModel):
    id: int
    username: str

# This is the schema that will be used when READING recipe data from the API.
# It includes fields that are generated by the database (id, created_at) and
# relationship data (the author).
class Recipe(RecipeBase):
    id: int
    created_at: datetime
    author: UserInRecipe
    
    # This tells the Pydantic model to read the data even if it is not a dict,
    # but an ORM model (or any other arbitrary object with attributes).
    # It's the glue between our SQLAlchemy models and our Pydantic schemas.
    model_config = ConfigDict(from_attributes=True)


# ====================================================================
#                           USER SCHEMAS
# ====================================================================

# Base schema for a user, with common fields.
class UserBase(BaseModel):
    username: str
    email: EmailStr

# Schema for data required when creating a new user.
# Includes the password, which should never be exposed in a response.
class UserCreate(UserBase):
    password: str

class RecipeInUser(BaseModel):
    id: int
    title: str

# This is the schema that will be used when READING user data from the API.
# It includes the user's recipes.
# IMPORTANT: It does NOT include the hashed_password.
class User(UserBase):
    id: int
    created_at: datetime
    recipes: List[RecipeInUser] = [] # A list of the user's recipes

    # Add the same config for ORM mode
    model_config = ConfigDict(from_attributes=True)

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: Optional[str] = None
