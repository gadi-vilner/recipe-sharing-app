# backend/app/database.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from .config import settings # Import our settings object

# The database URL loaded from our .env file via the Settings class
SQLALCHEMY_DATABASE_URL = settings.database_url

# The SQLAlchemy engine is the entrypoint to our database.
# It provides a pool of database connections.
# The 'echo=True' argument is useful for debugging; it logs all the SQL
# statements generated by SQLAlchemy. You can remove it in production.
engine = create_engine(SQLALCHEMY_DATABASE_URL, echo=True)

# The SessionLocal class is a "factory" for creating new database sessions.
# Each instance of SessionLocal will be a database session.
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# This is the dependency we will inject into our API endpoints.
def get_db():
    """
    A generator function that yields a new database session for each request.
    It ensures the database session is always closed after the request,
    even if an error occurs.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()